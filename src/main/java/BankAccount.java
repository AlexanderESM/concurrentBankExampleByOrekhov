import java.util.concurrent.locks.Lock;
import java.util.concurrent.locks.ReentrantLock;

public class BankAccount {
    // Уникальный номер счета
    private final int accountNumber;

    // Текущий баланс счета
    private double balance;

    /**
     * ReentrantLock — это класс из пакета java.util.concurrent.locks, который предоставляет более гибкую альтернативу встроенной синхронизации
     * с использованием ключевого слова synchronized.
     * Повторная блокировка (Reentrant):
     * ReentrantLock является повторной блокировкой, что означает, что тот же поток, который захватил блокировку, может повторно захватить её без блокировки самого себя.
     * Если поток, который уже захватил блокировку, попытается снова захватить эту же блокировку, то это будет разрешено. В этом случае счётчик блокировки увеличится.
     * Блокировка будет освобождена только тогда, когда поток вызовет unlock() столько раз, сколько раз он захватывал блокировку.
     */
    // Объект блокировки для синхронизации доступа к данным счета
    final Lock lock = new ReentrantLock();

    // Конструктор для создания счета с уникальным номером и начальным балансом
    public BankAccount(int accountNumber, double initialBalance) {
        this.accountNumber = accountNumber;
        this.balance = initialBalance;
    }

    /**
     * Метод lock() в классе ReentrantLock используется для захвата блокировки.
     * Он блокирует поток, который пытается захватить блокировку, если она в данный момент занята другим потоком.
     * Поток, вызвавший lock(), будет ожидать освобождения блокировки и продолжит выполнение только после того, как блокировка станет доступной.
     * Метод unlock() в классе ReentrantLock используется для освобождения захваченной блокировки,
     * позволяя другим потокам получить доступ к ресурсу, который был защищён этой блокировкой.
     * @param amount
     */
    // Метод для внесения денег на счет
    public void deposit(double amount) {
        // Захватываем блокировку перед изменением баланса
        lock.lock();
        try {
            // Увеличиваем баланс на указанную сумму
            balance += amount;
        } finally {
            // Освобождаем блокировку, чтобы другие потоки могли работать с этим счетом
            lock.unlock();
        }
    }

    // Метод для снятия денег со счета
    public void withdraw(double amount) {
        // Захватываем блокировку перед изменением баланса
        lock.lock();
        try {
            // Проверяем, достаточно ли средств на счете
            if (balance >= amount) {
                // Если достаточно средств, уменьшаем баланс на указанную сумму
                balance -= amount;
            } else {
                // Если средств недостаточно, выводим сообщение
                System.out.println("Недостаточно средств на счете " + accountNumber);
            }
        } finally {
            // Освобождаем блокировку
            lock.unlock();
        }
    }

    // Метод для получения текущего баланса счета
    public double getBalance() {
        // Захватываем блокировку для безопасного чтения баланса
        lock.lock();
        try {
            // Возвращаем текущий баланс
            return balance;
        } finally {
            // Освобождаем блокировку
            lock.unlock();
        }
    }

    // Метод для получения номера счета
    public int getAccountNumber() {
        // Возвращаем номер счета
        return accountNumber;
    }
}
